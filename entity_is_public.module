<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityMalformedException;
use Drupal\Core\Session\AnonymousUserSession;
use Symfony\Cmf\Component\Routing\RouteObjectInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Exception\ResourceNotFoundException;

/**
 * Implements hook_hook_info().
 */
function entity_is_public_hook_info() {
  return array_fill_keys(array(
    'entity_is_public',
    'entity_is_public_alter',
  ), array('group' => 'entity'));
}

/**
 * Determine if an entity is publicly visible.
 *
 * @param string $entity_type
 *   An entity type of $entity.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity object.
 * @param array $options
 *   An optional array of options to use when determining publicity.
 * @param array $data
 *   An optional array of additional data to use when determining publicity.
 *
 * @return bool
 *   TRUE if the entity is publicly visible, or FALSE otherwise.
 */
function entity_is_public($entity_type, EntityInterface $entity, array $options = array(), array $data = array()) {
  try {
    $data += [
      'entity_type' => $entity_type,
      'entity' => $entity,
      'uri' => [
        'path' => $entity->toUrl()->toString(),
      ],
    ];

    $is_public = FALSE;

    $module_handler = \Drupal::moduleHandler();
    foreach ($module_handler->getImplementations('entity_is_public') as $module) {
      $result = $module_handler->invoke($module, 'entity_is_public', [
        $entity_type,
        $entity,
        $options,
        $data
      ]);
      if (isset($result)) {
        $is_public = $result;
        if (!$is_public) {
          // Do not bother checking the rest of the implementations if something
          // returned FALSE.
          break;
        }
      }
    }

    // Allow any modules to alter the result before returning it.
    $module_handler->alter('entity_is_public', $is_public, $data, $options);
    return $is_public;
  }
  catch (EntityMalformedException $e) {
    return FALSE;
  }
}

/**
 * Implements hook_entity_is_public() on behalf of system.module.
 *
 * @param string $entity_type
 *   The entity type.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity instance.
 * @param array $options
 *   An optional array of options to use when determining publicity.
 * @param array $data
 *   An optional array of additional data to use when determining publicity.
 *
 * @return bool
 *   TRUE if the entity is publicly accessible. False otherwise.
 */
function system_entity_is_public($entity_type, EntityInterface $entity, array $options, array $data) {
  try {
    $front_page = \Drupal::configFactory()->get('system.site')->get('page.front') ?: 'admin/node';
    // The front page may be using an alias. Extract the path out of it.
    $front_page_path = \Drupal::service('path.alias_manager')->getPathByAlias($front_page);
    if ($front_page_path == $data['uri']['path']) {
      // If the entity is the front page, it should be visible.
      return TRUE;
    }

    // Entity must not have an administrative path.
    $request = Request::create($data['uri']['path']);
    $route_match = \Drupal::service('router.no_access_checks')->matchRequest($request);
    $route = $route_match[RouteObjectInterface::ROUTE_OBJECT];
    if (\Drupal::service('router.admin_context')->isAdminRoute($route)) {
      return FALSE;
    }

    // Rely on access control for viewing this entity.
    return \Drupal::entityTypeManager()
        ->getAccessControlHandler($entity_type)
        ->access($entity, 'view', new AnonymousUserSession());
  }
  catch (ResourceNotFoundException $e) {
    return FALSE;
  }

}

/**
 * Implements hook_entity_is_public() on behalf of path.module.
 */
function path_entity_is_public($entity_type, $entity, array $options, array $data) {
  if (!empty($options['alias required']) && !empty($data['uri']['path'])) {
    return (bool) \Drupal::service('path.alias_manager')->getAliasByPath($data['uri']['path']);
  }
}

/**
 * Implements hook_entity_is_public() on behalf of rabbit_hole.module.
 *
 * @TODO Refactor \Drupal\rabbit_hole\BehaviorInvoker::processEntity() so it provides this as part of the API.
 */
function rabbit_hole_entity_is_public($entity_type, EntityInterface $entity, array $options, array $data) {
  $values = \Drupal::service('rabbit_hole.behavior_invoker')->getRabbitHoleValuesForEntity($entity);
  throw new \Exception('incomplete method');
  //return rabbit_hole_get_action($entity_type, $entity) == RABBIT_HOLE_DISPLAY_CONTENT;
}

/**
 * Implements hook_entity_is_public() on behalf of page_manager.module.
 *
 * Checks if there is a page manager task that returns
 */
function page_manager_entity_is_public($entity_type, $entity, array $options, array $data) {
  $return = $task = NULL;

  switch ($entity_type) {
    case 'taxonomy_term':
      $task = page_manager_get_task('term_view');
      break;
    default:
      $task = page_manager_get_task($entity_type . '_view');
      break;
  }

  if (!empty($task) && !$task['disabled']) {
    ctools_include('context');
    ctools_include('context-task-handler');
    $args = array($entity);
    $contexts = ctools_context_handler_get_task_contexts($task, '', $args);
    $subtask = '';
    $handlers = page_manager_load_sorted_handlers($task, $subtask, TRUE);

    // Switch user to anonymous.
    global $user;
    $original_user = $user;
    $old_state = drupal_save_session();
    drupal_save_session(FALSE);
    $user = drupal_anonymous_user();

    if ($id = ctools_context_handler_get_render_handler($task, $subtask, $handlers, $contexts, $args)) {
      $info = ctools_context_handler_render_handler($task, $subtask, $handlers[$id], $contexts, $args, FALSE);
      if (!empty($info['response code']) && $info['response code'] != 200) {
        $return = FALSE;
      }
    }

    $user = $original_user;
    drupal_save_session($old_state);
  }

  return $return;
}
